Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> empty
Rule 2     start -> data
Rule 3     start -> date
Rule 4     start -> DATE
Rule 5     start -> offense
Rule 6     start -> STRING
Rule 7     time -> INTEGER : INTEGER
Rule 8     date -> INTEGER - INTEGER - INTEGER
Rule 9     offense -> STRING - STRING
Rule 10    data -> date time offense STRING
Rule 11    empty -> <empty>

Terminals, with rules where they appear

-                    : 8 8 9
:                    : 7
DATE                 : 4
INTEGER              : 7 7 8 8 8
STRING               : 6 9 9 10
error                : 

Nonterminals, with rules where they appear

data                 : 2
date                 : 3 10
empty                : 1
offense              : 5 10
start                : 0
time                 : 10

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . empty
    (2) start -> . data
    (3) start -> . date
    (4) start -> . DATE
    (5) start -> . offense
    (6) start -> . STRING
    (11) empty -> .
    (10) data -> . date time offense STRING
    (8) date -> . INTEGER - INTEGER - INTEGER
    (9) offense -> . STRING - STRING

    DATE            shift and go to state 1
    STRING          shift and go to state 2
    $end            reduce using rule 11 (empty -> .)
    INTEGER         shift and go to state 3

    start                          shift and go to state 4
    date                           shift and go to state 5
    offense                        shift and go to state 6
    data                           shift and go to state 7
    empty                          shift and go to state 8

state 1

    (4) start -> DATE .

    $end            reduce using rule 4 (start -> DATE .)


state 2

    (6) start -> STRING .
    (9) offense -> STRING . - STRING

    $end            reduce using rule 6 (start -> STRING .)
    -               shift and go to state 9


state 3

    (8) date -> INTEGER . - INTEGER - INTEGER

    -               shift and go to state 10


state 4

    (0) S' -> start .



state 5

    (3) start -> date .
    (10) data -> date . time offense STRING
    (7) time -> . INTEGER : INTEGER

    $end            reduce using rule 3 (start -> date .)
    INTEGER         shift and go to state 12

    time                           shift and go to state 11

state 6

    (5) start -> offense .

    $end            reduce using rule 5 (start -> offense .)


state 7

    (2) start -> data .

    $end            reduce using rule 2 (start -> data .)


state 8

    (1) start -> empty .

    $end            reduce using rule 1 (start -> empty .)


state 9

    (9) offense -> STRING - . STRING

    STRING          shift and go to state 13


state 10

    (8) date -> INTEGER - . INTEGER - INTEGER

    INTEGER         shift and go to state 14


state 11

    (10) data -> date time . offense STRING
    (9) offense -> . STRING - STRING

    STRING          shift and go to state 16

    offense                        shift and go to state 15

state 12

    (7) time -> INTEGER . : INTEGER

    :               shift and go to state 17


state 13

    (9) offense -> STRING - STRING .

    STRING          reduce using rule 9 (offense -> STRING - STRING .)
    $end            reduce using rule 9 (offense -> STRING - STRING .)


state 14

    (8) date -> INTEGER - INTEGER . - INTEGER

    -               shift and go to state 18


state 15

    (10) data -> date time offense . STRING

    STRING          shift and go to state 19


state 16

    (9) offense -> STRING . - STRING

    -               shift and go to state 9


state 17

    (7) time -> INTEGER : . INTEGER

    INTEGER         shift and go to state 20


state 18

    (8) date -> INTEGER - INTEGER - . INTEGER

    INTEGER         shift and go to state 21


state 19

    (10) data -> date time offense STRING .

    $end            reduce using rule 10 (data -> date time offense STRING .)


state 20

    (7) time -> INTEGER : INTEGER .

    STRING          reduce using rule 7 (time -> INTEGER : INTEGER .)


state 21

    (8) date -> INTEGER - INTEGER - INTEGER .

    INTEGER         reduce using rule 8 (date -> INTEGER - INTEGER - INTEGER .)
    $end            reduce using rule 8 (date -> INTEGER - INTEGER - INTEGER .)

